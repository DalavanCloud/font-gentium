/*
	Description: GDL rules and definitions to handle tone ligatures for Roman fonts.
	Author: Sharon Correll and Mark Anderson


	This file is part of Gentium Plus font family
	(http://scripts.sil.org/Gentium) and is
	Copyright (c) 2003-2014 SIL International (http://www.sil.org/),
	with Reserved Font Names "Gentium" and "SIL".

	This Font Software is licensed under the SIL Open Font License,
	Version 1.1.

	You should have received a copy of the license along with this Font Software.
	If this is not the case, go to (http://scripts.sil.org/OFL) for all the
	details including a FAQ.


	Changes

SJC     2007-01-23	9-level pitch tramlines only happen on spaces that are surrounded by pitches
SJC     2006-12-15      Added 9-level pitch system
SJC/MAA 2005-05-10	Reworked to use attachments rather than ligatures.

*/

#include "stddef.gdh"

//////////////////////////////////////////////////////////////////////////////////////
//
//	Five-pitch system
//

// Identical-tone chain handling:
#define TLSTATE user1
#define TLSfirst 0  // 0 is the initial value
#define TLSchain 1
#define TLSstop 2

// Special handling for identical-tone chain with a left-staff; these are tricky.
#define LTFLAG user2
#define LThit 1
#define LTback 2

// To save space, use the same user-defined variables differently for the 9-pitch system.

// To mark chains:
#define P9SEQ user1
#define P9last 0
#define P9more 1

// For deleting superfluous 9-pitch glyph.
#define P9DEL user2
#define P9keep 1
#define P9del 2

// Debuggers:
#define BBLEFT user3
#define BBRIGHT user4

table(glyph)

	// Individual glyph definitions

	// Right staves representing the last tone in a sequence:
	gRightStaff1 = postscript("TnStaffRt1") {tone = 1};
gRightStaff2 = postscript("TnStaffRt2") {tone = 2};
gRightStaff3 = postscript("TnStaffRt3") {tone = 3};
gRightStaff4 = postscript("TnStaffRt4") {tone = 4};
gRightStaff5 = postscript("TnStaffRt5") {tone = 5};

	// Invisible glyphs representing a hidden staff at the end of a sequence:
	gRightStaff1_no = postscript("TnStaffRt1no") {tone = 1};
gRightStaff2_no = postscript("TnStaffRt2no") {tone = 2};
gRightStaff3_no = postscript("TnStaffRt3no") {tone = 3};
gRightStaff4_no = postscript("TnStaffRt4no") {tone = 4};
gRightStaff5_no = postscript("TnStaffRt5no") {tone = 5};

	gRightTone1  = postscript("TnLtr1")   {tone = 1};
gRightTone11 = postscript("TnContRt11") {tone = 1};
gRightTone12 = postscript("TnContRt12") {tone = 1};
gRightTone13 = postscript("TnContRt13") {tone = 1};
gRightTone14 = postscript("TnContRt14") {tone = 1};
gRightTone15 = postscript("TnContRt15") {tone = 1};
gRightTone2  = postscript("TnLtr2")   {tone = 2};
gRightTone21 = postscript("TnContRt21") {tone = 2};
gRightTone22 = postscript("TnContRt22") {tone = 2};
gRightTone23 = postscript("TnContRt23") {tone = 2};
gRightTone24 = postscript("TnContRt24") {tone = 2};
gRightTone25 = postscript("TnContRt25") {tone = 2};
gRightTone3  = postscript("TnLtr3")   {tone = 3};
gRightTone31 = postscript("TnContRt31") {tone = 3};
gRightTone32 = postscript("TnContRt32") {tone = 3};
gRightTone33 = postscript("TnContRt33") {tone = 3};
gRightTone34 = postscript("TnContRt34") {tone = 3};
gRightTone35 = postscript("TnContRt35") {tone = 3};
gRightTone4  = postscript("TnLtr4")   {tone = 4};
gRightTone41 = postscript("TnContRt41") {tone = 4};
gRightTone42 = postscript("TnContRt42") {tone = 4};
gRightTone43 = postscript("TnContRt43") {tone = 4};
gRightTone44 = postscript("TnContRt44") {tone = 4};
gRightTone45 = postscript("TnContRt45") {tone = 4};
gRightTone5  = postscript("TnLtr5")   {tone = 5};
gRightTone51 = postscript("TnContRt51") {tone = 5};
gRightTone52 = postscript("TnContRt52") {tone = 5};
gRightTone53 = postscript("TnContRt53") {tone = 5};
gRightTone54 = postscript("TnContRt54") {tone = 5};
gRightTone55 = postscript("TnContRt55") {tone = 5};

	// Left staves representing the first tone in a sequence:
	gLeftStaff1 = postscript("TnStaffLft1") {tone = 1};
gLeftStaff2 = postscript("TnStaffLft2") {tone = 2};
gLeftStaff3 = postscript("TnStaffLft3") {tone = 3};
gLeftStaff4 = postscript("TnStaffLft4") {tone = 4};
gLeftStaff5 = postscript("TnStaffLft5") {tone = 5};

	// Invisible glyphs representing a hidden staff at the beginning of a sequence:
	gLeftStaff1_no = postscript("TnStaffLft1no") {tone = 1};
gLeftStaff2_no = postscript("TnStaffLft2no") {tone = 2};
gLeftStaff3_no = postscript("TnStaffLft3no") {tone = 3};
gLeftStaff4_no = postscript("TnStaffLft4no") {tone = 4};
gLeftStaff5_no = postscript("TnStaffLft5no") {tone = 5};

/*
	gLeftTone1 = postscript("uniA716");
	gLeftTone2 = postscript("uniA715");
	gLeftTone3 = postscript("uniA714");
	gLeftTone4 = postscript("uniA713");
	gLeftTone5 = postscript("uniA712");
*/
	gLeftTone1 = U+A716 {tone = 1};
	gLeftTone2 = U+A715 {tone = 2};
	gLeftTone3 = U+A714 {tone = 3};
	gLeftTone4 = U+A713 {tone = 4};
	gLeftTone5 = U+A712 {tone = 5};

	gLeftTone11 = postscript("TnContLft11") {tone = 1};
gLeftTone12 = postscript("TnContLft12") {tone = 1}; // 1878
gLeftTone13 = postscript("TnContLft13") {tone = 1};
gLeftTone14 = postscript("TnContLft14") {tone = 1};
gLeftTone15 = postscript("TnContLft15") {tone = 1};
gLeftTone21 = postscript("TnContLft21") {tone = 2};
gLeftTone22 = postscript("TnContLft22") {tone = 2};
gLeftTone23 = postscript("TnContLft23") {tone = 2};
gLeftTone24 = postscript("TnContLft24") {tone = 2};
gLeftTone25 = postscript("TnContLft25") {tone = 2};
gLeftTone31 = postscript("TnContLft31") {tone = 3};
gLeftTone32 = postscript("TnContLft32") {tone = 3};
gLeftTone33 = postscript("TnContLft33") {tone = 3};
gLeftTone34 = postscript("TnContLft34") {tone = 3};
gLeftTone35 = postscript("TnContLft35") {tone = 3};
gLeftTone41 = postscript("TnContLft41") {tone = 4};
gLeftTone42 = postscript("TnContLft42") {tone = 4};
gLeftTone43 = postscript("TnContLft43") {tone = 4};
gLeftTone44 = postscript("TnContLft44") {tone = 4};
gLeftTone45 = postscript("TnContLft45") {tone = 4};
gLeftTone51 = postscript("TnContLft51") {tone = 5};
gLeftTone52 = postscript("TnContLft52") {tone = 5};
gLeftTone53 = postscript("TnContLft53") {tone = 5};
gLeftTone54 = postscript("TnContLft54") {tone = 5};
gLeftTone55 = postscript("TnContLft55") {tone = 5};


	cSupNum = (g__sup_one, g__sup_two, g__sup_three, g__sup_four, g__sup_five);


	// Right staff

	cRightTone1 = (gRightTone1, gRightStaff1, gRightStaff1_no);
	cRightTone2 = (gRightTone2, gRightStaff2, gRightStaff2_no);
	cRightTone3 = (gRightTone3, gRightStaff3, gRightStaff3_no);
	cRightTone4 = (gRightTone4, gRightStaff4, gRightStaff4_no);
	cRightTone5 = (gRightTone5, gRightStaff5, gRightStaff5_no);

	// indexed classes:
	cRightTone      = (gRightTone1,    gRightTone2,    gRightTone3,    gRightTone4,    gRightTone5);
	cRightTone_no1  = (gRightTone11,   gRightTone22,   gRightTone33,   gRightTone44,   gRightTone55); // for singletons
	cRightStaff     = (gRightStaff1,   gRightStaff2,   gRightStaff3,   gRightStaff4,   gRightStaff5);
	cRightStaff_no  = (gRightStaff1_no,gRightStaff2_no,gRightStaff3_no,gRightStaff4_no,gRightStaff5_no);

	cRightTone1Contour = (gRightTone11, gRightTone12, gRightTone13, gRightTone14, gRightTone15);
	cRightTone2Contour = (gRightTone21, gRightTone22, gRightTone23, gRightTone24, gRightTone25);
	cRightTone3Contour = (gRightTone31, gRightTone32, gRightTone33, gRightTone34, gRightTone35);
	cRightTone4Contour = (gRightTone41, gRightTone42, gRightTone43, gRightTone44, gRightTone45);
	cRightTone5Contour = (gRightTone51, gRightTone52, gRightTone53, gRightTone54, gRightTone55);

	cRightToneHoriz = (gRightTone11, gRightTone22, gRightTone33, gRightTone44, gRightTone55);

	// for positioning:
	cRightContour = (cRightTone1Contour, cRightTone2Contour,
			cRightTone3Contour, cRightTone4Contour, cRightTone5Contour);

	cRightContourOrStaff = (cRightContour, cRightStaff, cRightStaff_no);


	// Left staff

	cLeftContourOrStaff1 = (gLeftStaff1, gLeftStaff1_no,
			gLeftTone11, gLeftTone21, gLeftTone31, gLeftTone41, gLeftTone51);
	cLeftContourOrStaff2 = (gLeftStaff2, gLeftStaff2_no,
			gLeftTone12, gLeftTone22, gLeftTone32, gLeftTone42, gLeftTone52);
	cLeftContourOrStaff3 = (gLeftStaff3, gLeftStaff3_no,
			gLeftTone13, gLeftTone23, gLeftTone33, gLeftTone43, gLeftTone53);
	cLeftContourOrStaff4 = (gLeftStaff4, gLeftStaff4_no,
			gLeftTone14, gLeftTone24, gLeftTone34, gLeftTone44, gLeftTone54);
	cLeftContourOrStaff5 = (gLeftStaff5, gLeftStaff5_no,
			gLeftTone15, gLeftTone25, gLeftTone35, gLeftTone45, gLeftTone55);

	// indexed classes:
	cLeftTone      = (gLeftTone1,    gLeftTone2,    gLeftTone3,    gLeftTone4,    gLeftTone5);
	cLeftTone_no1  = (gLeftTone11,   gLeftTone22,   gLeftTone33,   gLeftTone44,   gLeftTone55); // for singletons
	cLeftStaff     = (gLeftStaff1,   gLeftStaff2,   gLeftStaff3,   gLeftStaff4,   gLeftStaff5);
	cLeftStaff_no  = (gLeftStaff1_no,gLeftStaff2_no,gLeftStaff3_no,gLeftStaff4_no,gLeftStaff5_no);

	cLeftTone1Contour = (gLeftTone11, gLeftTone12, gLeftTone13, gLeftTone14, gLeftTone15);
	cLeftTone2Contour = (gLeftTone21, gLeftTone22, gLeftTone23, gLeftTone24, gLeftTone25);
	cLeftTone3Contour = (gLeftTone31, gLeftTone32, gLeftTone33, gLeftTone34, gLeftTone35);
	cLeftTone4Contour = (gLeftTone41, gLeftTone42, gLeftTone43, gLeftTone44, gLeftTone45);
	cLeftTone5Contour = (gLeftTone51, gLeftTone52, gLeftTone53, gLeftTone54, gLeftTone55);

	cLeftToneHoriz = (gLeftTone11, gLeftTone22, gLeftTone33, gLeftTone44, gLeftTone55);

	// for positioning:
	cLeftContour = (cLeftTone1Contour, cLeftTone2Contour, cLeftTone3Contour,
			cLeftTone4Contour, cLeftTone5Contour);
	cLeftContourOrStaff = (cLeftContour, cLeftStaff, cLeftStaff_no);

endtable; // glyph


table(subs)

pass(1) {MaxBackup = 15; MaxRuleLoop = 30}

	// Right staff

	if (supernum)
	//  _ cPitch > g207B:3 cSupNum:3 / cSupNum _ _;	// include minus sign between digits
	    cRightTone > cSupNum;
	    cLeftTone  > cSupNum;
	//else
	// NB: The normal algorithm includes this else-clause, but it cannot in this
	// case because the cSupNum contains encoded characters that should NOT be displayed
	// as tone bars if the feature happens to be off!
	//	cSupNum > cPitch;
	endif;

	// else...

	// For each of the rules below, if we have an identical-tone chain going,
	// and the two tones are still equal, continue the chain. Identical-tone chains
	// need to be handled specially below (in pass 2).
	#define SETSTATE {TLSTATE = ((@1.tone == @2.tone) && (@1.TLSTATE != TLSstop)) ? TLSchain : TLSstop}

	if (!supernum && hide_tone_staff)
		// hidden staves
		cRightTone1  cRightTone  >  cRightTone1Contour$2  cRightStaff_no$2  SETSTATE  /  _  ^  _;
		cRightTone2  cRightTone  >  cRightTone2Contour$2  cRightStaff_no$2  SETSTATE  /  _  ^  _;
		cRightTone3  cRightTone  >  cRightTone3Contour$2  cRightStaff_no$2  SETSTATE  /  _  ^  _;
		cRightTone4  cRightTone  >  cRightTone4Contour$2  cRightStaff_no$2  SETSTATE  /  _  ^  _;
		cRightTone5  cRightTone  >  cRightTone5Contour$2  cRightStaff_no$2  SETSTATE  /  _  ^  _;
	endif;

	if (!supernum && !hide_tone_staff)
		cRightTone1  cRightTone  >  cRightTone1Contour$2  cRightStaff$2  SETSTATE  /  _  ^  _;
		cRightTone2  cRightTone  >  cRightTone2Contour$2  cRightStaff$2  SETSTATE  /  _  ^  _;
		cRightTone3  cRightTone  >  cRightTone3Contour$2  cRightStaff$2  SETSTATE  /  _  ^  _;
		cRightTone4  cRightTone  >  cRightTone4Contour$2  cRightStaff$2  SETSTATE  /  _  ^  _;
		cRightTone5  cRightTone  >  cRightTone5Contour$2  cRightStaff$2  SETSTATE  /  _  ^  _;
	endif;

	// Left staff

	if (!supernum && hide_tone_staff)
		cLeftTone  >  cLeftStaff_no$1  / ^ _  cLeftTone;
	endif;
	if (!supernum && !hide_tone_staff)
		cLeftTone  >  cLeftStaff$1  / ^ _  cLeftTone;
	endif;

	// These will only fire in the case of !supernum. (It is more efficient to omit
	// unnecessary constraints.)
	cLeftContourOrStaff1  cLeftTone  >  @1  cLeftTone1Contour$2  SETSTATE  /  _  ^  _;
	cLeftContourOrStaff2  cLeftTone  >  @1  cLeftTone2Contour$2  SETSTATE  /  _  ^  _;
	cLeftContourOrStaff3  cLeftTone  >  @1  cLeftTone3Contour$2  SETSTATE  /  _  ^  _;
	cLeftContourOrStaff4  cLeftTone  >  @1  cLeftTone4Contour$2  SETSTATE  /  _  ^  _;
	cLeftContourOrStaff5  cLeftTone  >  @1  cLeftTone5Contour$2  SETSTATE  /  _  ^  _;

endpass; // sub - 1

// pass 2 used for ASCII-relevant features

pass(3) {MaxBackup = 15; MaxRuleLoop = 30}

	// Identical-tone chains need special handling: the staff needs to be replaced by a staff
	// plus a horizontal bar.

	_  cRightStaff     >  cRightToneHoriz$2:2  @2  /  _  _ {TLSTATE == TLSchain};
	_  cRightStaff_no  >  cRightToneHoriz$2:2  @2  /  _  _ {TLSTATE == TLSchain};


	// Left-staff identical-tone chains are tricky. We have to search backwards from
	// the end of the chain to be sure they are all the same tone. A proper chain is
	// marked with TLSTATE == TLSchain all the way through. (An improper chain may have
	// TLSTATE == TLSchain just at the beginning.

  	// Keep progressing through a chain (till we get to the end):
  	cLeftContourOrStaff { LTFLAG = LThit }  /  _  { LTFLAG == 0 }  cLeftContour {LTFLAG == 0};

    // Found the end of the chain; start backing up:
    cLeftContour { LTFLAG = LTback }
        /  ^ cLeftContourOrStaff {LTFLAG == LThit} // the first item might not have TLSTATE == TLSchain
				_ {TLSTATE == TLSchain};

    // Hit the beginning of the sequence; do the insertion:
    cLeftStaff   _    >  @1  cLeftToneHoriz$1:1
        /  _  _  cLeftContour {LTFLAG == LTback && TLSTATE == TLSchain};
    cLeftStaff_no  _  >  @1  cLeftToneHoriz$1:1
        /  _  _  cLeftContour {LTFLAG == LTback && TLSTATE == TLSchain};

    // Finally, handle any singleton glyphs with staves.
    if (!supernum && hide_tone_staff)
        cRightTone  >  cRightTone_no1;
        cLeftTone   >  cLeftTone_no1;
    endif;

endpass; // sub - 3

endtable;  // subs


table(positioning)

pass(1)

	cRightContour {BBLEFT = bb.left; BBRIGHT = bb.right}
		cRightContourOrStaff { attach {to = @1; at = TLS; with = TLM }; insert = true; /* BBLEFT = bb.left; BBRIGHT = bb.right */ }
			/ _  ^  _;

	cLeftContourOrStaff  cLeftContour { attach {to = @1; at = TLS; with = TLM }; insert = true}
			/ _  ^  _;

endpass; // pos - 1

endtable; // positioning


//////////////////////////////////////////////////////////////////////////////////////
//
//	Nine-pitch system
//

table(glyph)

	g9Pitch1 = postscript("TnLtrNineSeg11");
g9Pitch2 = postscript("TnLtrNineSeg22");
g9Pitch3 = postscript("TnLtrNineSeg33");
g9Pitch4 = postscript("TnLtrNineSeg44");
g9Pitch5 = postscript("TnLtrNineSeg55");
g9Pitch6 = postscript("TnLtrNineSeg66");
g9Pitch7 = postscript("TnLtrNineSeg77");
g9Pitch8 = postscript("TnLtrNineSeg88");
g9Pitch9 = postscript("TnLtrNineSeg99");

	g9Pitch11 = pseudo(postscript("TnLtrNineSeg11"));  // process this differently than g9Pitch1--it represents a 1-1 sequence
g9Pitch12 = postscript("TnLtrNineSeg12");
g9Pitch13 = postscript("TnLtrNineSeg13");
g9Pitch14 = postscript("TnLtrNineSeg14");
g9Pitch15 = postscript("TnLtrNineSeg15");
g9Pitch16 = postscript("TnLtrNineSeg16");
g9Pitch17 = postscript("TnLtrNineSeg17");
g9Pitch18 = postscript("TnLtrNineSeg18");
g9Pitch19 = postscript("TnLtrNineSeg19");

	g9Pitch21 = postscript("TnLtrNineSeg21");
g9Pitch22 = pseudo(postscript("TnLtrNineSeg22"));  // different than g9Pitch2--it represents a 2-2 sequence
g9Pitch23 = postscript("TnLtrNineSeg23");
g9Pitch24 = postscript("TnLtrNineSeg24");
g9Pitch25 = postscript("TnLtrNineSeg25");
g9Pitch26 = postscript("TnLtrNineSeg26");
g9Pitch27 = postscript("TnLtrNineSeg27");
g9Pitch28 = postscript("TnLtrNineSeg28");
g9Pitch29 = postscript("TnLtrNineSeg29");

	g9Pitch31 = postscript("TnLtrNineSeg31");
g9Pitch32 = postscript("TnLtrNineSeg32");
g9Pitch33 = pseudo(postscript("TnLtrNineSeg33"));  // process this differently than g9Pitch3
g9Pitch34 = postscript("TnLtrNineSeg34");
g9Pitch35 = postscript("TnLtrNineSeg35");
g9Pitch36 = postscript("TnLtrNineSeg36");
g9Pitch37 = postscript("TnLtrNineSeg37");
g9Pitch38 = postscript("TnLtrNineSeg38");
g9Pitch39 = postscript("TnLtrNineSeg39");

	g9Pitch41 = postscript("TnLtrNineSeg41");
g9Pitch42 = postscript("TnLtrNineSeg42");
g9Pitch43 = postscript("TnLtrNineSeg43");
g9Pitch44 = pseudo(postscript("TnLtrNineSeg44"));  // process this differently than g9Pitch4
g9Pitch45 = postscript("TnLtrNineSeg45");
g9Pitch46 = postscript("TnLtrNineSeg46");
g9Pitch47 = postscript("TnLtrNineSeg47");
g9Pitch48 = postscript("TnLtrNineSeg48");
g9Pitch49 = postscript("TnLtrNineSeg49");

	g9Pitch51 = postscript("TnLtrNineSeg51");
g9Pitch52 = postscript("TnLtrNineSeg52");
g9Pitch53 = postscript("TnLtrNineSeg53");
g9Pitch54 = postscript("TnLtrNineSeg54");
g9Pitch55 = pseudo(postscript("TnLtrNineSeg55"));  // process this differently than g9Pitch5
g9Pitch56 = postscript("TnLtrNineSeg56");
g9Pitch57 = postscript("TnLtrNineSeg57");
g9Pitch58 = postscript("TnLtrNineSeg58");
g9Pitch59 = postscript("TnLtrNineSeg59");

	g9Pitch61 = postscript("TnLtrNineSeg61");
g9Pitch62 = postscript("TnLtrNineSeg62");
g9Pitch63 = postscript("TnLtrNineSeg63");
g9Pitch64 = postscript("TnLtrNineSeg64");
g9Pitch65 = postscript("TnLtrNineSeg65");
g9Pitch66 = pseudo(postscript("TnLtrNineSeg66"));  // process this differently than g9Pitch6
g9Pitch67 = postscript("TnLtrNineSeg67");
g9Pitch68 = postscript("TnLtrNineSeg68");
g9Pitch69 = postscript("TnLtrNineSeg69");

	g9Pitch71 = postscript("TnLtrNineSeg71");
g9Pitch72 = postscript("TnLtrNineSeg72");
g9Pitch73 = postscript("TnLtrNineSeg73");
g9Pitch74 = postscript("TnLtrNineSeg74");
g9Pitch75 = postscript("TnLtrNineSeg75");
g9Pitch76 = postscript("TnLtrNineSeg76");
g9Pitch77 = pseudo(postscript("TnLtrNineSeg77"));  // process this differently than g9Pitch7
g9Pitch78 = postscript("TnLtrNineSeg78");
g9Pitch79 = postscript("TnLtrNineSeg79");

	g9Pitch81 = postscript("TnLtrNineSeg81");
g9Pitch82 = postscript("TnLtrNineSeg82");
g9Pitch83 = postscript("TnLtrNineSeg83");
g9Pitch84 = postscript("TnLtrNineSeg84");
g9Pitch85 = postscript("TnLtrNineSeg85");
g9Pitch86 = postscript("TnLtrNineSeg86");
g9Pitch87 = postscript("TnLtrNineSeg87");
g9Pitch88 = pseudo(postscript("TnLtrNineSeg88"));  // process this differently than g9Pitch8
g9Pitch89 = postscript("TnLtrNineSeg89");

	g9Pitch91 = postscript("TnLtrNineSeg91");
g9Pitch92 = postscript("TnLtrNineSeg92");
g9Pitch93 = postscript("TnLtrNineSeg93");
g9Pitch94 = postscript("TnLtrNineSeg94");
g9Pitch95 = postscript("TnLtrNineSeg95");
g9Pitch96 = postscript("TnLtrNineSeg96");
g9Pitch97 = postscript("TnLtrNineSeg97");
g9Pitch98 = postscript("TnLtrNineSeg98");
g9Pitch99 = pseudo(postscript("TnLtrNineSeg99"));  // process this differently than g9Pitch9

	// The following 3 groups of classes must correspond.
	c9PitchX  = (g9Pitch1 g9Pitch2 g9Pitch3 g9Pitch4 g9Pitch5 g9Pitch6 g9Pitch7 g9Pitch8 g9Pitch9);

	c9Pitch1X = (g9Pitch11 g9Pitch12 g9Pitch13 g9Pitch14 g9Pitch15 g9Pitch16 g9Pitch17 g9Pitch18 g9Pitch19);
	c9Pitch2X = (g9Pitch21 g9Pitch22 g9Pitch23 g9Pitch24 g9Pitch25 g9Pitch26 g9Pitch27 g9Pitch28 g9Pitch29);
	c9Pitch3X = (g9Pitch31 g9Pitch32 g9Pitch33 g9Pitch34 g9Pitch35 g9Pitch36 g9Pitch37 g9Pitch38 g9Pitch39);
	c9Pitch4X = (g9Pitch41 g9Pitch42 g9Pitch43 g9Pitch44 g9Pitch45 g9Pitch46 g9Pitch47 g9Pitch48 g9Pitch49);
	c9Pitch5X = (g9Pitch51 g9Pitch52 g9Pitch53 g9Pitch54 g9Pitch55 g9Pitch56 g9Pitch57 g9Pitch58 g9Pitch59);
	c9Pitch6X = (g9Pitch61 g9Pitch62 g9Pitch63 g9Pitch64 g9Pitch65 g9Pitch66 g9Pitch67 g9Pitch68 g9Pitch69);
	c9Pitch7X = (g9Pitch71 g9Pitch72 g9Pitch73 g9Pitch74 g9Pitch75 g9Pitch76 g9Pitch77 g9Pitch78 g9Pitch79);
	c9Pitch8X = (g9Pitch81 g9Pitch82 g9Pitch83 g9Pitch84 g9Pitch85 g9Pitch86 g9Pitch87 g9Pitch88 g9Pitch89);
	c9Pitch9X = (g9Pitch91 g9Pitch92 g9Pitch93 g9Pitch94 g9Pitch95 g9Pitch96 g9Pitch97 g9Pitch98 g9Pitch99);

	c9PitchX1 = (g9Pitch11 g9Pitch21 g9Pitch31 g9Pitch41 g9Pitch51 g9Pitch61 g9Pitch71 g9Pitch81 g9Pitch91);
	c9PitchX2 = (g9Pitch12 g9Pitch22 g9Pitch32 g9Pitch42 g9Pitch52 g9Pitch62 g9Pitch72 g9Pitch82 g9Pitch92);
	c9PitchX3 = (g9Pitch13 g9Pitch23 g9Pitch33 g9Pitch43 g9Pitch53 g9Pitch63 g9Pitch73 g9Pitch83 g9Pitch93);
	c9PitchX4 = (g9Pitch14 g9Pitch24 g9Pitch34 g9Pitch44 g9Pitch54 g9Pitch64 g9Pitch74 g9Pitch84 g9Pitch94);
	c9PitchX5 = (g9Pitch15 g9Pitch25 g9Pitch35 g9Pitch45 g9Pitch55 g9Pitch65 g9Pitch75 g9Pitch85 g9Pitch95);
	c9PitchX6 = (g9Pitch16 g9Pitch26 g9Pitch36 g9Pitch46 g9Pitch56 g9Pitch66 g9Pitch76 g9Pitch86 g9Pitch96);
	c9PitchX7 = (g9Pitch17 g9Pitch27 g9Pitch37 g9Pitch47 g9Pitch57 g9Pitch67 g9Pitch77 g9Pitch87 g9Pitch97);
	c9PitchX8 = (g9Pitch18 g9Pitch28 g9Pitch38 g9Pitch48 g9Pitch58 g9Pitch68 g9Pitch78 g9Pitch88 g9Pitch98);
	c9PitchX9 = (g9Pitch19 g9Pitch29 g9Pitch39 g9Pitch49 g9Pitch59 g9Pitch69 g9Pitch79 g9Pitch89 g9Pitch99);

	//////

	c9PitchXX = (c9Pitch1X c9Pitch2X c9Pitch3X c9Pitch4X c9Pitch5X c9Pitch6X c9Pitch7X c9Pitch8X c9Pitch9X)
		{ component.p1 = box(0,-descent,    aw/2,ascent);
		  component.p2 = box(aw/2,-descent, aw,ascent) };


	// Glyphs with tramlines:

	g9Pitch1_Lines = postscript("TnLtrNineSeg11.Lines");
g9Pitch2_Lines = postscript("TnLtrNineSeg22.Lines");
g9Pitch3_Lines = postscript("TnLtrNineSeg33.Lines");
g9Pitch4_Lines = postscript("TnLtrNineSeg44.Lines");
g9Pitch5_Lines = postscript("TnLtrNineSeg55.Lines");
g9Pitch6_Lines = postscript("TnLtrNineSeg66.Lines");
g9Pitch7_Lines = postscript("TnLtrNineSeg77.Lines");
g9Pitch8_Lines = postscript("TnLtrNineSeg88.Lines");
g9Pitch9_Lines = postscript("TnLtrNineSeg99.Lines");

	g9Pitch11_Lines = postscript("TnLtrNineSeg11.Lines");	// don't need a pseudo-glyph for these because no further special processing is needed
g9Pitch12_Lines = postscript("TnLtrNineSeg12.Lines");
g9Pitch13_Lines = postscript("TnLtrNineSeg13.Lines");
g9Pitch14_Lines = postscript("TnLtrNineSeg14.Lines");
g9Pitch15_Lines = postscript("TnLtrNineSeg15.Lines");
g9Pitch16_Lines = postscript("TnLtrNineSeg16.Lines");
g9Pitch17_Lines = postscript("TnLtrNineSeg17.Lines");
g9Pitch18_Lines = postscript("TnLtrNineSeg18.Lines");
g9Pitch19_Lines = postscript("TnLtrNineSeg19.Lines");

	g9Pitch21_Lines = postscript("TnLtrNineSeg21.Lines");
g9Pitch22_Lines = postscript("TnLtrNineSeg22.Lines");
g9Pitch23_Lines = postscript("TnLtrNineSeg23.Lines");
g9Pitch24_Lines = postscript("TnLtrNineSeg24.Lines");
g9Pitch25_Lines = postscript("TnLtrNineSeg25.Lines");
g9Pitch26_Lines = postscript("TnLtrNineSeg26.Lines");
g9Pitch27_Lines = postscript("TnLtrNineSeg27.Lines");
g9Pitch28_Lines = postscript("TnLtrNineSeg28.Lines");
g9Pitch29_Lines = postscript("TnLtrNineSeg29.Lines");

	g9Pitch31_Lines = postscript("TnLtrNineSeg31.Lines");
g9Pitch32_Lines = postscript("TnLtrNineSeg32.Lines");
g9Pitch33_Lines = postscript("TnLtrNineSeg33.Lines");
g9Pitch34_Lines = postscript("TnLtrNineSeg34.Lines");
g9Pitch35_Lines = postscript("TnLtrNineSeg35.Lines");
g9Pitch36_Lines = postscript("TnLtrNineSeg36.Lines");
g9Pitch37_Lines = postscript("TnLtrNineSeg37.Lines");
g9Pitch38_Lines = postscript("TnLtrNineSeg38.Lines");
g9Pitch39_Lines = postscript("TnLtrNineSeg39.Lines");

	g9Pitch41_Lines = postscript("TnLtrNineSeg41.Lines");
g9Pitch42_Lines = postscript("TnLtrNineSeg42.Lines");
g9Pitch43_Lines = postscript("TnLtrNineSeg43.Lines");
g9Pitch44_Lines = postscript("TnLtrNineSeg44.Lines");
g9Pitch45_Lines = postscript("TnLtrNineSeg45.Lines");
g9Pitch46_Lines = postscript("TnLtrNineSeg46.Lines");
g9Pitch47_Lines = postscript("TnLtrNineSeg47.Lines");
g9Pitch48_Lines = postscript("TnLtrNineSeg48.Lines");
g9Pitch49_Lines = postscript("TnLtrNineSeg49.Lines");

	g9Pitch51_Lines = postscript("TnLtrNineSeg51.Lines");
g9Pitch52_Lines = postscript("TnLtrNineSeg52.Lines");
g9Pitch53_Lines = postscript("TnLtrNineSeg53.Lines");
g9Pitch54_Lines = postscript("TnLtrNineSeg54.Lines");
g9Pitch55_Lines = postscript("TnLtrNineSeg55.Lines");
g9Pitch56_Lines = postscript("TnLtrNineSeg56.Lines");
g9Pitch57_Lines = postscript("TnLtrNineSeg57.Lines");
g9Pitch58_Lines = postscript("TnLtrNineSeg58.Lines");
g9Pitch59_Lines = postscript("TnLtrNineSeg59.Lines");

	g9Pitch61_Lines = postscript("TnLtrNineSeg61.Lines");
g9Pitch62_Lines = postscript("TnLtrNineSeg62.Lines");
g9Pitch63_Lines = postscript("TnLtrNineSeg63.Lines");
g9Pitch64_Lines = postscript("TnLtrNineSeg64.Lines");
g9Pitch65_Lines = postscript("TnLtrNineSeg65.Lines");
g9Pitch66_Lines = postscript("TnLtrNineSeg66.Lines");
g9Pitch67_Lines = postscript("TnLtrNineSeg67.Lines");
g9Pitch68_Lines = postscript("TnLtrNineSeg68.Lines");
g9Pitch69_Lines = postscript("TnLtrNineSeg69.Lines");

	g9Pitch71_Lines = postscript("TnLtrNineSeg71.Lines");
g9Pitch72_Lines = postscript("TnLtrNineSeg72.Lines");
g9Pitch73_Lines = postscript("TnLtrNineSeg73.Lines");
g9Pitch74_Lines = postscript("TnLtrNineSeg74.Lines");
g9Pitch75_Lines = postscript("TnLtrNineSeg75.Lines");
g9Pitch76_Lines = postscript("TnLtrNineSeg76.Lines");
g9Pitch77_Lines = postscript("TnLtrNineSeg77.Lines");
g9Pitch78_Lines = postscript("TnLtrNineSeg78.Lines");
g9Pitch79_Lines = postscript("TnLtrNineSeg79.Lines");

	g9Pitch81_Lines = postscript("TnLtrNineSeg81.Lines");
g9Pitch82_Lines = postscript("TnLtrNineSeg82.Lines");
g9Pitch83_Lines = postscript("TnLtrNineSeg83.Lines");
g9Pitch84_Lines = postscript("TnLtrNineSeg84.Lines");
g9Pitch85_Lines = postscript("TnLtrNineSeg85.Lines");
g9Pitch86_Lines = postscript("TnLtrNineSeg86.Lines");
g9Pitch87_Lines = postscript("TnLtrNineSeg87.Lines");
g9Pitch88_Lines = postscript("TnLtrNineSeg88.Lines");
g9Pitch89_Lines = postscript("TnLtrNineSeg89.Lines");

	g9Pitch91_Lines = postscript("TnLtrNineSeg91.Lines");
g9Pitch92_Lines = postscript("TnLtrNineSeg92.Lines");
g9Pitch93_Lines = postscript("TnLtrNineSeg93.Lines");
g9Pitch94_Lines = postscript("TnLtrNineSeg94.Lines");
g9Pitch95_Lines = postscript("TnLtrNineSeg95.Lines");
g9Pitch96_Lines = postscript("TnLtrNineSeg96.Lines");
g9Pitch97_Lines = postscript("TnLtrNineSeg97.Lines");
g9Pitch98_Lines = postscript("TnLtrNineSeg98.Lines");
g9Pitch99_Lines = postscript("TnLtrNineSeg99.Lines");

	g_pitchSpace = pseudo(postscript("Space"));	// special kind of space that might need tramlines
g_noPitchSpace = pseudo(postscript("Space"));	// space that will not need tramlines after all

	// The following two classes must correspond.
	cno_LinesXXX = (g_pitchSpace
		g9Pitch1  g9Pitch2  g9Pitch3  g9Pitch4  g9Pitch5  g9Pitch6  g9Pitch7  g9Pitch8  g9Pitch9
		g9Pitch11 g9Pitch12 g9Pitch13 g9Pitch14 g9Pitch15 g9Pitch16 g9Pitch17 g9Pitch18 g9Pitch19
		g9Pitch21 g9Pitch22 g9Pitch23 g9Pitch24 g9Pitch25 g9Pitch26 g9Pitch27 g9Pitch28 g9Pitch29
		g9Pitch31 g9Pitch32 g9Pitch33 g9Pitch34 g9Pitch35 g9Pitch36 g9Pitch37 g9Pitch38 g9Pitch39
		g9Pitch41 g9Pitch42 g9Pitch43 g9Pitch44 g9Pitch45 g9Pitch46 g9Pitch47 g9Pitch48 g9Pitch49
		g9Pitch51 g9Pitch52 g9Pitch53 g9Pitch54 g9Pitch55 g9Pitch56 g9Pitch57 g9Pitch58 g9Pitch59
		g9Pitch61 g9Pitch62 g9Pitch63 g9Pitch64 g9Pitch65 g9Pitch66 g9Pitch67 g9Pitch68 g9Pitch69
		g9Pitch71 g9Pitch72 g9Pitch73 g9Pitch74 g9Pitch75 g9Pitch76 g9Pitch77 g9Pitch78 g9Pitch79
		g9Pitch81 g9Pitch82 g9Pitch83 g9Pitch84 g9Pitch85 g9Pitch86 g9Pitch87 g9Pitch88 g9Pitch89
		g9Pitch91 g9Pitch92 g9Pitch93 g9Pitch94 g9Pitch95 g9Pitch96 g9Pitch97 g9Pitch98 g9Pitch99);

	cLinesXXX = (g__space_lines
		g9Pitch1_Lines  g9Pitch2_Lines  g9Pitch3_Lines  g9Pitch4_Lines  g9Pitch5_Lines  g9Pitch6_Lines  g9Pitch7_Lines  g9Pitch8_Lines  g9Pitch9_Lines
		g9Pitch11_Lines g9Pitch12_Lines g9Pitch13_Lines g9Pitch14_Lines g9Pitch15_Lines g9Pitch16_Lines g9Pitch17_Lines g9Pitch18_Lines g9Pitch19_Lines
		g9Pitch21_Lines g9Pitch22_Lines g9Pitch23_Lines g9Pitch24_Lines g9Pitch25_Lines g9Pitch26_Lines g9Pitch27_Lines g9Pitch28_Lines g9Pitch29_Lines
		g9Pitch31_Lines g9Pitch32_Lines g9Pitch33_Lines g9Pitch34_Lines g9Pitch35_Lines g9Pitch36_Lines g9Pitch37_Lines g9Pitch38_Lines g9Pitch39_Lines
		g9Pitch41_Lines g9Pitch42_Lines g9Pitch43_Lines g9Pitch44_Lines g9Pitch45_Lines g9Pitch46_Lines g9Pitch47_Lines g9Pitch48_Lines g9Pitch49_Lines
		g9Pitch51_Lines g9Pitch52_Lines g9Pitch53_Lines g9Pitch54_Lines g9Pitch55_Lines g9Pitch56_Lines g9Pitch57_Lines g9Pitch58_Lines g9Pitch59_Lines
		g9Pitch61_Lines g9Pitch62_Lines g9Pitch63_Lines g9Pitch64_Lines g9Pitch65_Lines g9Pitch66_Lines g9Pitch67_Lines g9Pitch68_Lines g9Pitch69_Lines
		g9Pitch71_Lines g9Pitch72_Lines g9Pitch73_Lines g9Pitch74_Lines g9Pitch75_Lines g9Pitch76_Lines g9Pitch77_Lines g9Pitch78_Lines g9Pitch79_Lines
		g9Pitch81_Lines g9Pitch82_Lines g9Pitch83_Lines g9Pitch84_Lines g9Pitch85_Lines g9Pitch86_Lines g9Pitch87_Lines g9Pitch88_Lines g9Pitch89_Lines
		g9Pitch91_Lines g9Pitch92_Lines g9Pitch93_Lines g9Pitch94_Lines g9Pitch95_Lines g9Pitch96_Lines g9Pitch97_Lines g9Pitch98_Lines g9Pitch99_Lines )
	    { component.p1 = box(0,-descent,    aw/2,ascent);
	      component.p2 = box(aw/2,-descent, aw,ascent) };


endtable; // glyph


table(substitution) {MaxBackup = 15; MaxRuleLoop = 30;}

pass(1)

if (pitch9 < nonLigated) // do the ligation

	// Only spaces between pitches have the capacity to get tramlines.

	// space sequence that may need tramlines
	g__space  >  g_pitchSpace  /  (cno_LinesXXX g_pitchSpace)  _  (cno_LinesXXX g__space);

	// end of space sequence followed by a pitch: leave as is (ie, can take tramlines)
	g_pitchSpace  >  @1  /  _  cno_LinesXXX;
	// end of space sequence that is NOT followed by a pitch: cannot take tramline, and back up
	(g__space g_pitchSpace)  >  g_noPitchSpace /  ^ g_pitchSpace  _ ;
	// continue marking no-tramlines after backing up
	g_pitchSpace  >  g_noPitchSpace;


	// Don't need to mark a single item as last: that is the default (0).

	// Pick the form that ligates with the previous.
	// During this pass we leave the first item in place, which will end up being superfluous
	// unless we have a whole chain of identical pitches.
	(g9Pitch1 c9PitchX1)  c9PitchX  >  @1 {P9SEQ = P9more}  c9Pitch1X / _ ^ _;
	(g9Pitch2 c9PitchX2)  c9PitchX  >  @1 {P9SEQ = P9more}  c9Pitch2X / _ ^ _;
	(g9Pitch3 c9PitchX3)  c9PitchX  >  @1 {P9SEQ = P9more}  c9Pitch3X / _ ^ _;
	(g9Pitch4 c9PitchX4)  c9PitchX  >  @1 {P9SEQ = P9more}  c9Pitch4X / _ ^ _;
	(g9Pitch5 c9PitchX5)  c9PitchX  >  @1 {P9SEQ = P9more}  c9Pitch5X / _ ^ _;
	(g9Pitch6 c9PitchX6)  c9PitchX  >  @1 {P9SEQ = P9more}  c9Pitch6X / _ ^ _;
	(g9Pitch7 c9PitchX7)  c9PitchX  >  @1 {P9SEQ = P9more}  c9Pitch7X / _ ^ _;
	(g9Pitch8 c9PitchX8)  c9PitchX  >  @1 {P9SEQ = P9more}  c9Pitch8X / _ ^ _;
	(g9Pitch9 c9PitchX9)  c9PitchX  >  @1 {P9SEQ = P9more}  c9Pitch9X / _ ^ _;

endif;

endpass; // sub - 1

// pass 2 - ASCII-related rules

pass(3)
	// Note: the reason for the somewhat complicated processing is to allow us to delete the
	// superfluous first item and do the tramline substitution in one pass, rather than adding
	// an extra substitution pass.

if (pitch9 < nonLigated) // do the ligation

	// Only one item in the chain: keep it!
	c9PitchX  >  @1 {P9DEL = P9keep} /  ^  _ {P9DEL == 0 && P9SEQ == P9last};

	// Unless we have a complete chain of all the same pitch, the first item is superfluous.
	// If that's the case, mark the first item as one we want to keep.
	// These rules handle a chain of up to 5 identical items.
	g9Pitch1  >  @1 {P9DEL = P9keep} / ^ _ {P9DEL == 0}  [[g9Pitch11? g9Pitch11]? g9Pitch11 ]? g9Pitch11 {P9SEQ == P9last} ;
	g9Pitch2  >  @1 {P9DEL = P9keep} / ^ _ {P9DEL == 0}  [[g9Pitch22? g9Pitch22]? g9Pitch22 ]? g9Pitch22 {P9SEQ == P9last} ;
	g9Pitch3  >  @1 {P9DEL = P9keep} / ^ _ {P9DEL == 0}  [[g9Pitch33? g9Pitch33]? g9Pitch33 ]? g9Pitch33 {P9SEQ == P9last} ;
	g9Pitch4  >  @1 {P9DEL = P9keep} / ^ _ {P9DEL == 0}  [[g9Pitch44? g9Pitch44]? g9Pitch44 ]? g9Pitch44 {P9SEQ == P9last} ;
	g9Pitch5  >  @1 {P9DEL = P9keep} / ^ _ {P9DEL == 0}  [[g9Pitch55? g9Pitch55]? g9Pitch55 ]? g9Pitch55 {P9SEQ == P9last} ;
	g9Pitch6  >  @1 {P9DEL = P9keep} / ^ _ {P9DEL == 0}  [[g9Pitch66? g9Pitch66]? g9Pitch66 ]? g9Pitch66 {P9SEQ == P9last} ;
	g9Pitch7  >  @1 {P9DEL = P9keep} / ^ _ {P9DEL == 0}  [[g9Pitch77? g9Pitch77]? g9Pitch77 ]? g9Pitch77 {P9SEQ == P9last} ;
	g9Pitch8  >  @1 {P9DEL = P9keep} / ^ _ {P9DEL == 0}  [[g9Pitch88? g9Pitch88]? g9Pitch88 ]? g9Pitch88 {P9SEQ == P9last} ;
	g9Pitch9  >  @1 {P9DEL = P9keep} / ^ _ {P9DEL == 0}  [[g9Pitch99? g9Pitch99]? g9Pitch99 ]? g9Pitch99 {P9SEQ == P9last} ;

	// There isn't a complete chain of identical items, so delete that first item.
	c9PitchX  c9PitchXX  >  _  @2:(1 2) {comp {p1.ref = @1; p2.ref = @2 }}
		/  _ {P9DEL != P9keep} ^ _ ;

endif;

// When all other processing has been done, substitute the tramline version.
if (pitch9 == tramlines || pitch9 == tramNonLigated) // tramlines or tramNonLigated
	cno_LinesXXX  >  cLinesXXX;
endif;

endpass; // sub - 3

endtable; // subs
